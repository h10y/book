fig:part1-devops-cycle
fig:part1-hosting-cycle
fig:part1-examples-faithful
fig:part1-bananas-time
fig:part1-bananas-classes
fig:part1-examples-bananas
fig:part1-examples-lbtest
fig:part2-shiny-app-architecture
fig:part2-rstudio-r
fig:part2-vscode-r
fig:part2-rstudio-py
fig:part2-vscode-py
fig:part2-shiny-lifecycle
fig:part2-docker-architecture
fig:part2-docker-layers
background
data-intensive-apps
enter-shiny
application-development
application-hosting
the-devops-cycle
the-hosting-cycle
summary
hosting-concepts
domains-and-networking
website-technologies
servers
hosting-environments
summary-1
local-setup
installing-your-developer-tools
r
install-python
web-browser
quarto
docker-desktop
the-command-line
navigation
current-working-directory
listing-directory
change-directory
editing-files
file-and-directory-operations
making-directories
moving-files-and-directories
copying-files-and-directories
deleting-files-and-directories
super-user-access
source-code-management-with-git
git-services
git-commands
cloning-repositories
creating-a-commit
pulling-changes
status-of-repository
gitignore
branching
servers-1
secure-shell-ssh
password-authentication
key-based-authentication
readability-on-the-command-line
summary-2
examples
old-faithful
bananas
the-bananas-data-set
model-training
the-shiny-app
load-balancing-test
summary-3
developing-shiny-apps
creating-a-shiny-app
the-user-interface
the-server-function
shiny-express
organizing-shiny-apps
single-file
multiple-files
shiny-app-with-nested-files-structure
programmatic-cases
shiny-app-as-an-r-package
golem
leprechaun
dynamic-documents
r-markdown
quarto-with-r
quarto-with-python
shinylive
python-shinylive
r-shinylive
shinylive-in-quarto
running-shiny-apps-locally
r-1
python
the-shiny-app-lifecycle
sharing-the-shiny-app-code
summary-4
containerizing-shiny-apps
docker-concepts
docker-engine
container-registries
images
the-dockerfile
containers
the-docker-command-line
working-with-existing-images
image-names-and-tags
pulling-an-image
docker-login
running-a-container
building-a-new-image
r-for-shiny
buildx-and-buildkit
inspecting-the-image
r-for-python
managing-images-and-containers
sharing-images
pushing-images
docker-registries
log-in-to-a-registry
local-registry
the-dockerfile-1
shiny-host-and-port
shiny-apps-with-dependencies-use-bananas
parent-images
rocker-r-lib-rstudio-posit
system-libraries
rspm-bspm-r2u-python
r-dependencies
explicit-dependencies
description-file-remotes-pak
renv
deps
using-the-deps-cli
python-requirements
pip
other-options-for-python
best-practices
minimize-dependencies
minimize-dependencies-1
use-caching
order-layers
switch-user
multi-stage-builds
other-considerations
use-a-linter
use-labels
docker-security-scanning
what-else
layers-and-caching
hardware-architectures
multi-stage-builds-1
mounting-volumes
ports
uid
troubleshooting
shinylive-1
rmd
quarto-1
using-buildkit
image-build-times
image-sizes
alpine-linux-based-image
container-orchestration
docker-compose
troubleshooting-1
summary-5
a-review-of-shiny-hosting-options
start-with-the-why
list-your-requirements
identify-your-constraints
options-at-a-glance
hosting-patterns
the-cloud
servers-2
custom-domain-names
reverse-proxies
install-caddy
monitoring-processes
systemctl
shutdown-and-reboot
networkingfirewalls
systemd
static-shiny-apps
compiling-without-containers-r-vs-python
compiling-with-containers
static-hosting-options
dynamic-shiny-apps
hosting-platforms-paas
reverse-proxy-required
deploying-static-files-with-shinylive
deploying-shiny-apps-to-shinyapps.io
r-2
python-1
considerations-hosting
security
certificates
storing-secrets
shiny-app-authentication
performance-availability-and-monitoring
scaling
benchmarking
what-to-monitor
operations-and-maintenance
cicd
embedding-onto-your-website
other-stuff
information-about-hosting
conclusions
